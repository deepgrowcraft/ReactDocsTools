// import React, { useState } from "react";
// import { PDFDocument, rgb } from "pdf-lib";
// import { saveAs } from "file-saver";

// const PdfWithPageNumbers = () => {
//   const [text, setText] = useState(""); // Text to be added to each page
//   const [file, setFile] = useState(null); // For storing the imported PDF file
//   const [isCreating, setIsCreating] = useState(false);
//   const [includePageNumbers, setIncludePageNumbers] = useState(false);
//   const [startPage, setStartPage] = useState(1); // Start page for page numbers
//   const [endPage, setEndPage] = useState(1); // End page for page numbers

//   // Positioning inputs
//   const [textX, setTextX] = useState(50); // X coordinate for text position
//   const [textY, setTextY] = useState(500); // Y coordinate for text position

//   // Text styling
//   const [textOpacity, setTextOpacity] = useState(1); // Text opacity (0 - 1)
//   const [textColor, setTextColor] = useState("#000000"); // Text color

//   // Handle text input
//   const handleTextChange = (e) => {
//     setText(e.target.value);
//   };

//   // Handle file upload
//   const handleFileChange = (e) => {
//     const selectedFile = e.target.files[0];
//     if (selectedFile) {
//       setFile(selectedFile);
//     }
//   };

//   // Handle page number toggle
//   const handlePageNumberChange = (e) => {
//     setIncludePageNumbers(e.target.checked);
//   };

//   // Handle range change for page numbers
//   const handleStartPageChange = (e) => {
//     setStartPage(Number(e.target.value));
//   };

//   const handleEndPageChange = (e) => {
//     setEndPage(Number(e.target.value));
//   };

//   // Handle position input
//   const handlePositionChange = (e) => {
//     const { name, value } = e.target;
//     if (name === "textX") {
//       setTextX(Number(value));
//     } else if (name === "textY") {
//       setTextY(Number(value));
//     }
//   };

//   // Handle text styling
//   const handleTextOpacityChange = (e) => {
//     setTextOpacity(Number(e.target.value));
//   };

//   const handleTextColorChange = (e) => {
//     setTextColor(e.target.value);
//   };

//   const createPdf = async () => {
//     if (!file) return;

//     setIsCreating(true);

//     try {
//       // Load the existing PDF
//       const fileBytes = await file.arrayBuffer();
//       const pdfDoc = await PDFDocument.load(fileBytes);

//       const pages = pdfDoc.getPages();
//       const { width, height } = pages[0].getSize();

//       // Add text to each page (if provided)
//       pages.forEach((page, index) => {
//         if (text) {
//           page.drawText(text, {
//             x: textX,
//             y: height - textY, // Y positioning depends on the PDF page height
//             size: 24,
//             color: rgb(
//               parseInt(textColor.slice(1, 3), 16) / 255,
//               parseInt(textColor.slice(3, 5), 16) / 255,
//               parseInt(textColor.slice(5, 7), 16) / 255
//             ), // Convert hex to rgb
//             opacity: textOpacity,
//           });
//         }

//         // If page numbers are selected and the page is within the range, add them
//         if (includePageNumbers) {
//           const pageNumber = index + 1; // Page number is 1-based
//           if (pageNumber >= startPage && pageNumber <= endPage) {
//             page.drawText(`Page ${pageNumber}`, {
//               x: width - 150,
//               y: 50,
//               size: 12,
//               color: rgb(0, 0, 0),
//             });
//           }
//         }
//       });

//       // Save the modified PDF
//       const pdfBytes = await pdfDoc.save();
//       const pdfBlob = new Blob([pdfBytes], { type: "application/pdf" });
//       saveAs(pdfBlob, "updated_pdf_with_text_and_page_numbers.pdf");

//       setIsCreating(false);
//     } catch (error) {
//       console.error("PDF creation failed:", error);
//       setIsCreating(false);
//     }
//   };

//   return (
//     <section className="px-4 py-16 mt-10 bg-gradient-to-b from-gray-50 via-gray-100 to-gray-200">
//       <div className="container mx-auto text-center">
//         <h1 className="mb-6 text-4xl font-extrabold text-gray-900 md:text-5xl">
//           Edit PDF with Customizable Text and Page Numbers
//         </h1>
//         <p className="max-w-3xl mx-auto mb-10 text-lg text-gray-700 md:text-xl">
//           Upload your PDF, add customizable text, adjust text styling, and
//           include page numbers.
//         </p>

//         <div className="max-w-xl p-8 mx-auto bg-white shadow-xl rounded-3xl">
//           {/* File upload */}
//           <div className="mb-4">
//             <input
//               type="file"
//               accept="application/pdf"
//               onChange={handleFileChange}
//               className="w-full p-4 border border-gray-300 rounded-md"
//             />
//           </div>

//           {/* Text input for PDF content */}
//           <div className="mb-4">
//             <textarea
//               value={text}
//               onChange={handleTextChange}
//               rows="4"
//               className="w-full p-4 border border-gray-300 rounded-md"
//               placeholder="Enter text for your PDF..."
//             />
//           </div>

//           {/* Text Position Inputs */}
//           <div className="mb-4">
//             <label className="block text-sm font-semibold text-gray-700">
//               Text Position
//             </label>
//             <div className="flex space-x-4">
//               <div className="flex-1">
//                 <label className="text-sm text-gray-700">X Position</label>
//                 <input
//                   type="number"
//                   name="textX"
//                   value={textX}
//                   onChange={handlePositionChange}
//                   className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                 />
//               </div>
//               <div className="flex-1">
//                 <label className="text-sm text-gray-700">Y Position</label>
//                 <input
//                   type="number"
//                   name="textY"
//                   value={textY}
//                   onChange={handlePositionChange}
//                   className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                 />
//               </div>
//             </div>
//           </div>

//           {/* Text Styling */}
//           <div className="mb-4">
//             <label className="block text-sm font-semibold text-gray-700">
//               Text Style
//             </label>
//             <div className="flex space-x-4">
//               <div className="flex-1">
//                 <label className="text-sm text-gray-700">Opacity</label>
//                 <input
//                   type="range"
//                   min="0"
//                   max="1"
//                   step="0.1"
//                   value={textOpacity}
//                   onChange={handleTextOpacityChange}
//                   className="w-full mt-2"
//                 />
//               </div>
//               <div className="flex-1">
//                 <label className="text-sm text-gray-700">Color</label>
//                 <input
//                   type="color"
//                   value={textColor}
//                   onChange={handleTextColorChange}
//                   className="w-full mt-2"
//                 />
//               </div>
//             </div>
//           </div>

//           {/* Page Number Checkbox */}
//           <div className="mb-4">
//             <label className="inline-flex items-center">
//               <input
//                 type="checkbox"
//                 checked={includePageNumbers}
//                 onChange={handlePageNumberChange}
//                 className="form-checkbox"
//               />
//               <span className="ml-2 text-gray-700">Include page numbers</span>
//             </label>
//           </div>

//           {/* Page Number Range */}
//           {includePageNumbers && (
//             <div className="mb-4">
//               <label className="block text-sm font-semibold text-gray-700">
//                 Page Number Range
//               </label>
//               <div className="flex space-x-4">
//                 <div className="flex-1">
//                   <label className="text-sm text-gray-700">Start Page</label>
//                   <input
//                     type="number"
//                     min={1}
//                     value={startPage}
//                     onChange={handleStartPageChange}
//                     className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                   />
//                 </div>
//                 <div className="flex-1">
//                   <label className="text-sm text-gray-700">End Page</label>
//                   <input
//                     type="number"
//                     min={startPage}
//                     value={endPage}
//                     onChange={handleEndPageChange}
//                     className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                   />
//                 </div>
//               </div>
//             </div>
//           )}

//           {/* Create PDF button */}
//           <button
//             onClick={createPdf}
//             disabled={isCreating || !file}
//             className={`mt-4 w-full bg-green-600 text-white font-semibold py-3 px-8 rounded-lg hover:bg-green-700 transition-all duration-300 transform hover:scale-105 shadow-lg ${
//               isCreating ? "opacity-50 cursor-not-allowed" : ""
//             }`}
//           >
//             {isCreating ? "Creating PDF..." : "Create PDF"}
//           </button>
//         </div>
//       </div>
//     </section>
//   );
// };

// export default PdfWithPageNumbers;

// import React, { useState, useRef, useEffect } from "react";
// import { PDFDocument, rgb } from "pdf-lib";
// import { saveAs } from "file-saver";
// import * as pdfjsLib from "pdfjs-dist"; // Import PDF.js

// const PdfWithPageNumbers = () => {
//   const [text, setText] = useState(""); // Text to be added to each page
//   const [file, setFile] = useState(null); // For storing the imported PDF file
//   const [isCreating, setIsCreating] = useState(false);
//   const [includePageNumbers, setIncludePageNumbers] = useState(false);
//   const [startPage, setStartPage] = useState(1); // Start page for page numbers
//   const [endPage, setEndPage] = useState(1); // End page for page numbers

//   // Text styling
//   const [textOpacity, setTextOpacity] = useState(1); // Text opacity (0 - 1)
//   const [textColor, setTextColor] = useState("#000000"); // Text color

//   // Reference to the canvas for rendering PDF
//   const canvasRef = useRef(null);
//   const [pdfUrl, setPdfUrl] = useState(null);
//   const [textPosition, setTextPosition] = useState({ x: 100, y: 100 }); // Default position

//   // Handle text input
//   const handleTextChange = (e) => {
//     setText(e.target.value);
//   };

//   // Handle file upload
//   const handleFileChange = (e) => {
//     const selectedFile = e.target.files[0];
//     if (selectedFile) {
//       setFile(selectedFile);
//       const fileUrl = URL.createObjectURL(selectedFile);
//       setPdfUrl(fileUrl);
//     }
//   };

//   // Handle page number toggle
//   const handlePageNumberChange = (e) => {
//     setIncludePageNumbers(e.target.checked);
//   };

//   // Handle range change for page numbers
//   const handleStartPageChange = (e) => {
//     setStartPage(Number(e.target.value));
//   };

//   const handleEndPageChange = (e) => {
//     setEndPage(Number(e.target.value));
//   };

//   // Handle text opacity
//   const handleTextOpacityChange = (e) => {
//     setTextOpacity(Number(e.target.value));
//   };

//   const handleTextColorChange = (e) => {
//     setTextColor(e.target.value);
//   };

//   // Handle dragging the text to position
//   const handleDragStart = (e) => {
//     const offsetX = e.clientX - textPosition.x;
//     const offsetY = e.clientY - textPosition.y;

//     const handleDragMove = (e) => {
//       setTextPosition({
//         x: e.clientX - offsetX,
//         y: e.clientY - offsetY,
//       });
//     };

//     const handleDragEnd = () => {
//       document.removeEventListener("mousemove", handleDragMove);
//       document.removeEventListener("mouseup", handleDragEnd);
//     };

//     document.addEventListener("mousemove", handleDragMove);
//     document.addEventListener("mouseup", handleDragEnd);
//   };

//   // Render the PDF preview using pdf.js
//   const renderPdf = async (url) => {
//     const loadingTask = pdfjsLib.getDocument(url);
//     const pdf = await loadingTask.promise;
//     const page = await pdf.getPage(1); // Render the first page

//     const canvas = canvasRef.current;
//     const context = canvas.getContext("2d");

//     const viewport = page.getViewport({ scale: 1.5 });
//     canvas.height = viewport.height;
//     canvas.width = viewport.width;

//     await page.render({
//       canvasContext: context,
//       viewport: viewport,
//     }).promise;
//   };

//   useEffect(() => {
//     if (pdfUrl) {
//       renderPdf(pdfUrl);
//     }
//   }, [pdfUrl]);

//   const createPdf = async () => {
//     if (!file) return;

//     setIsCreating(true);

//     try {
//       // Load the existing PDF
//       const fileBytes = await file.arrayBuffer();
//       const pdfDoc = await PDFDocument.load(fileBytes);

//       const pages = pdfDoc.getPages();
//       const { width, height } = pages[0].getSize();

//       // Add text to each page (if provided)
//       pages.forEach((page, index) => {
//         if (text) {
//           page.drawText(text, {
//             x: textPosition.x,
//             y: height - textPosition.y, // Y positioning depends on the PDF page height
//             size: 24,
//             color: rgb(
//               parseInt(textColor.slice(1, 3), 16) / 255,
//               parseInt(textColor.slice(3, 5), 16) / 255,
//               parseInt(textColor.slice(5, 7), 16) / 255
//             ), // Convert hex to rgb
//             opacity: textOpacity,
//           });
//         }

//         // If page numbers are selected and the page is within the range, add them
//         if (includePageNumbers) {
//           const pageNumber = index + 1; // Page number is 1-based
//           if (pageNumber >= startPage && pageNumber <= endPage) {
//             page.drawText(`Page ${pageNumber}`, {
//               x: width - 150,
//               y: 50,
//               size: 12,
//               color: rgb(0, 0, 0),
//             });
//           }
//         }
//       });

//       // Save the modified PDF
//       const pdfBytes = await pdfDoc.save();
//       const pdfBlob = new Blob([pdfBytes], { type: "application/pdf" });
//       saveAs(pdfBlob, "updated_pdf_with_text_and_page_numbers.pdf");

//       setIsCreating(false);
//     } catch (error) {
//       console.error("PDF creation failed:", error);
//       setIsCreating(false);
//     }
//   };

//   return (
//     <section className="px-4 py-16 mt-10 bg-gradient-to-b from-gray-50 via-gray-100 to-gray-200">
//       <div className="container mx-auto text-center">
//         <h1 className="mb-6 text-4xl font-extrabold text-gray-900 md:text-5xl">
//           Edit PDF with Customizable Text and Page Numbers
//         </h1>
//         <p className="max-w-3xl mx-auto mb-10 text-lg text-gray-700 md:text-xl">
//           Upload your PDF, add customizable text, adjust text styling, and
//           include page numbers.
//         </p>

//         <div className="max-w-xl p-8 mx-auto bg-white shadow-xl rounded-3xl">
//           {/* File upload */}
//           <div className="mb-4">
//             <input
//               type="file"
//               accept="application/pdf"
//               onChange={handleFileChange}
//               className="w-full p-4 border border-gray-300 rounded-md"
//             />
//           </div>

//           {/* Text input for PDF content */}
//           <div className="mb-4">
//             <textarea
//               value={text}
//               onChange={handleTextChange}
//               rows="4"
//               className="w-full p-4 border border-gray-300 rounded-md"
//               placeholder="Enter text for your PDF..."
//             />
//           </div>

//           {/* PDF Preview */}
//           {pdfUrl && (
//             <div className="relative mb-4">
//               <canvas ref={canvasRef} className="border-2 border-gray-300" />
//               {text && (
//                 <div
//                   style={{
//                     position: "absolute",
//                     top: textPosition.y,
//                     left: textPosition.x,
//                     cursor: "move",
//                     fontSize: "24px",
//                     color: textColor,
//                     opacity: textOpacity,
//                   }}
//                   onMouseDown={handleDragStart}
//                 >
//                   {text}
//                 </div>
//               )}
//             </div>
//           )}

//           {/* Text Styling */}
//           <div className="mb-4">
//             <label className="block text-sm font-semibold text-gray-700">
//               Text Style
//             </label>
//             <div className="flex space-x-4">
//               <div className="flex-1">
//                 <label className="text-sm text-gray-700">Opacity</label>
//                 <input
//                   type="range"
//                   min="0"
//                   max="1"
//                   step="0.1"
//                   value={textOpacity}
//                   onChange={handleTextOpacityChange}
//                   className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                 />{" "}
//               </div>{" "}
//               <div className="flex-1">
//                 {" "}
//                 <label className="text-sm text-gray-700">Text Color</label>{" "}
//                 <input
//                   type="color"
//                   value={textColor}
//                   onChange={handleTextColorChange}
//                   className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                 />{" "}
//               </div>{" "}
//             </div>{" "}
//           </div>
//           {/* Page Number Range */}
//           {includePageNumbers && (
//             <div className="mb-4">
//               <div className="flex space-x-4">
//                 <div className="flex-1">
//                   <label className="text-sm text-gray-700">Start Page</label>
//                   <input
//                     type="number"
//                     min="1"
//                     value={startPage}
//                     onChange={handleStartPageChange}
//                     className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                   />
//                 </div>
//                 <div className="flex-1">
//                   <label className="text-sm text-gray-700">End Page</label>
//                   <input
//                     type="number"
//                     min={startPage}
//                     value={endPage}
//                     onChange={handleEndPageChange}
//                     className="w-full p-2 mt-2 border border-gray-300 rounded-md"
//                   />
//                 </div>
//               </div>
//             </div>
//           )}

//           {/* Create PDF button */}
//           <button
//             onClick={createPdf}
//             disabled={isCreating || !file || !text}
//             className={`mt-4 w-full bg-green-600 text-white font-semibold py-3 px-8 rounded-lg hover:bg-green-700 transition-all duration-300 transform hover:scale-105 shadow-lg ${
//               isCreating ? "opacity-50 cursor-not-allowed" : ""
//             }`}
//           >
//             {isCreating ? "Creating PDF..." : "Create PDF"}
//           </button>
//         </div>
//       </div>
//     </section>
//   );
// };
// export default PdfWithPageNumbers;

import React, { useState, useRef, useEffect } from "react";
import { PDFDocument, rgb } from "pdf-lib";
import { saveAs } from "file-saver";
import * as pdfjsLib from "pdfjs-dist"; // Import PDF.js

const PdfWithPageNumbers = () => {
  const [text, setText] = useState(""); // Text to be added to each page
  const [file, setFile] = useState(null); // For storing the imported PDF file
  const [isCreating, setIsCreating] = useState(false);
  const [includePageNumbers, setIncludePageNumbers] = useState(false);
  const [startPage, setStartPage] = useState(1); // Start page for page numbers
  const [endPage, setEndPage] = useState(1); // End page for page numbers

  // Text styling
  const [textOpacity, setTextOpacity] = useState(1); // Text opacity (0 - 1)
  const [textColor, setTextColor] = useState("#000000"); // Text color

  // Reference to the canvas for rendering PDF
  const canvasRef = useRef(null);
  const [pdfUrl, setPdfUrl] = useState(null);
  const [textPosition, setTextPosition] = useState({ x: 100, y: 100 }); // Default position
  const [pdfDocument, setPdfDocument] = useState(null); // Store pdf-lib document

  // Handle text input
  const handleTextChange = (e) => {
    setText(e.target.value);
  };

  // Handle file upload
  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      const fileUrl = URL.createObjectURL(selectedFile);
      setPdfUrl(fileUrl);
    }
  };

  // Handle page number toggle
  const handlePageNumberChange = (e) => {
    setIncludePageNumbers(e.target.checked);
  };

  // Handle range change for page numbers
  const handleStartPageChange = (e) => {
    setStartPage(Number(e.target.value));
  };

  const handleEndPageChange = (e) => {
    setEndPage(Number(e.target.value));
  };

  // Handle text opacity
  const handleTextOpacityChange = (e) => {
    setTextOpacity(Number(e.target.value));
  };

  const handleTextColorChange = (e) => {
    setTextColor(e.target.value);
  };

  // Handle dragging the text to position
  const handleDragStart = (e) => {
    const offsetX = e.clientX - textPosition.x;
    const offsetY = e.clientY - textPosition.y;

    const handleDragMove = (e) => {
      setTextPosition({
        x: e.clientX - offsetX,
        y: e.clientY - offsetY,
      });
    };

    const handleDragEnd = () => {
      document.removeEventListener("mousemove", handleDragMove);
      document.removeEventListener("mouseup", handleDragEnd);
    };

    document.addEventListener("mousemove", handleDragMove);
    document.addEventListener("mouseup", handleDragEnd);
  };

  // Render the PDF preview using pdf.js
  const renderPdf = async (url) => {
    const loadingTask = pdfjsLib.getDocument(url);
    const pdf = await loadingTask.promise;
    setPdfDocument(pdf);

    const page = await pdf.getPage(1); // Render the first page

    const canvas = canvasRef.current;
    const context = canvas.getContext("2d");

    const viewport = page.getViewport({ scale: 1.5 });
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    await page.render({
      canvasContext: context,
      viewport: viewport,
    }).promise;
  };

  useEffect(() => {
    if (pdfUrl) {
      renderPdf(pdfUrl);
    }
  }, [pdfUrl]);

  const createPdf = async () => {
    if (!file) return;

    setIsCreating(true);

    try {
      // Load the existing PDF
      const fileBytes = await file.arrayBuffer();
      const pdfDoc = await PDFDocument.load(fileBytes);

      const pages = pdfDoc.getPages();
      const { width, height } = pages[0].getSize();

      // Add text to each page (if provided)
      pages.forEach((page, index) => {
        if (text) {
          page.drawText(text, {
            x: textPosition.x,
            y: height - textPosition.y, // Y positioning depends on the PDF page height
            size: 24,
            color: rgb(
              parseInt(textColor.slice(1, 3), 16) / 255,
              parseInt(textColor.slice(3, 5), 16) / 255,
              parseInt(textColor.slice(5, 7), 16) / 255
            ), // Convert hex to rgb
            opacity: textOpacity,
          });
        }

        // If page numbers are selected and the page is within the range, add them
        if (includePageNumbers) {
          const pageNumber = index + 1; // Page number is 1-based
          if (pageNumber >= startPage && pageNumber <= endPage) {
            page.drawText(`Page ${pageNumber}`, {
              x: width - 150,
              y: 50,
              size: 12,
              color: rgb(0, 0, 0),
            });
          }
        }
      });

      // Save the modified PDF
      const pdfBytes = await pdfDoc.save();
      const pdfBlob = new Blob([pdfBytes], { type: "application/pdf" });
      saveAs(pdfBlob, "updated_pdf_with_text_and_page_numbers.pdf");

      setIsCreating(false);
    } catch (error) {
      console.error("PDF creation failed:", error);
      setIsCreating(false);
    }
  };

  return (
    <section className="px-4 py-16 mt-10 bg-gradient-to-b from-gray-50 via-gray-100 to-gray-200">
      <div className="container mx-auto text-center">
        <h1 className="mb-6 text-4xl font-extrabold text-gray-900 md:text-5xl">
          Edit PDF with Customizable Text and Page Numbers
        </h1>
        <p className="max-w-3xl mx-auto mb-10 text-lg text-gray-700 md:text-xl">
          Upload your PDF, add customizable text, adjust text styling, and
          include page numbers.
        </p>

        <div className="max-w-xl p-8 mx-auto bg-white shadow-xl rounded-3xl">
          {/* File upload */}
          <div className="mb-4">
            <input
              type="file"
              accept="application/pdf"
              onChange={handleFileChange}
              className="w-full p-4 border border-gray-300 rounded-md"
            />
          </div>

          {/* Text input for PDF content */}
          <div className="mb-4">
            <textarea
              value={text}
              onChange={handleTextChange}
              rows="4"
              className="w-full p-4 border border-gray-300 rounded-md"
              placeholder="Enter text for your PDF..."
            />
          </div>

          {/* PDF Preview */}
          {pdfUrl && (
            <div className="relative mb-4">
              <canvas ref={canvasRef} className="border-2 border-gray-300" />
              {text && (
                <div
                  style={{
                    position: "absolute",
                    top: textPosition.y,
                    left: textPosition.x,
                    cursor: "move",
                    fontSize: "24px",
                    color: textColor,
                    opacity: textOpacity,
                  }}
                  onMouseDown={handleDragStart}
                >
                  {text}
                </div>
              )}
            </div>
          )}

          {/* Text Styling */}
          <div className="mb-4">
            <label className="block text-sm font-semibold text-gray-700">
              Text Style
            </label>
            <div className="flex space-x-4">
              <div className="flex-1">
                <label className="text-sm text-gray-700">Opacity</label>
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={textOpacity}
                  onChange={handleTextOpacityChange}
                  className="w-full p-2 mt-2 border border-gray-300 rounded-md"
                />{" "}
              </div>{" "}
              <div className="flex-1">
                {" "}
                <label className="text-sm text-gray-700">Text Color</label>{" "}
                <input
                  type="color"
                  value={textColor}
                  onChange={handleTextColorChange}
                  className="w-full p-2 mt-2 border border-gray-300 rounded-md"
                />{" "}
              </div>{" "}
            </div>{" "}
          </div>
          {/* Page Number Range */}
          {includePageNumbers && (
            <div className="mb-4">
              <div className="flex space-x-4">
                <div className="flex-1">
                  <label className="text-sm text-gray-700">Start Page</label>
                  <input
                    type="number"
                    min="1"
                    value={startPage}
                    onChange={handleStartPageChange}
                    className="w-full p-2 mt-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div className="flex-1">
                  <label className="text-sm text-gray-700">End Page</label>
                  <input
                    type="number"
                    min={startPage}
                    value={endPage}
                    onChange={handleEndPageChange}
                    className="w-full p-2 mt-2 border border-gray-300 rounded-md"
                  />
                </div>
              </div>
            </div>
          )}

          {/* Create PDF button */}
          <button
            onClick={createPdf}
            disabled={isCreating || !file || !text}
            className={`mt-4 w-full bg-green-600 text-white font-semibold py-3 px-8 rounded-lg hover:bg-green-700 transition-all duration-300 transform hover:scale-105 shadow-lg ${
              isCreating ? "opacity-50 cursor-not-allowed" : ""
            }`}
          >
            {isCreating ? "Creating PDF..." : "Create PDF"}
          </button>
        </div>
      </div>
    </section>
  );
};
export default PdfWithPageNumbers;
